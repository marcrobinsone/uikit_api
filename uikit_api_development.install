<?php
/**
 * @file
 * Install, update and uninstall functions for the development profile.
 */

/**
 * Include installation tasks.
 */
include_once dirname(__FILE__) . '/includes/install-tasks.inc';

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function uikit_api_development_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );

  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );

  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some standard blocks.
  variable_set('theme_default', 'docs');
  $default_theme = variable_get('theme_default');
  $admin_theme = 'seven';

  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'api',
      'delta' => 'api-search',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -2,
      'region' => 'sidebar_second',
      'pages' => "api\napi/*",
      'cache' => -1,
      'visibility' => 1,
    ),
    array(
      'module' => 'api',
      'delta' => 'navigation',
      'title' => '<none>',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'sidebar_second',
      'pages' => "api\napi/*",
      'cache' => -1,
      'visibility' => 1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'docs_companion',
      'delta' => 'docs-companion-copyright',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
  );

  $query = db_insert('block')->fields(array(
    'module',
    'delta',
    'title',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'cache',
    'visibility',
  ));

  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );

  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by
  // default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail
  // option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Create a default vocabulary named "Tags", enabled for the 'article' content
  // type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
  );

  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );

  field_create_field($field);
  $help = st('Enter a comma-separated list of words to describe your content.');

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'article',
    'description' => $help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);

  // Create an image field named "Image", enabled for the 'article' content
  // type.
  // Many of the following values will be defaulted, they're included here as an
  // illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7
  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);

  // Many of the following values will be defaulted, they're included here as an
  // illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);

  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access content',
    'access comments',
    'access API reference',
    $filtered_html_permission,
  ));

  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access content',
    'access comments',
    'access API reference',
    'post comments',
    'skip comment approval',
    $filtered_html_permission,
  ));

  // Create a default role for site administrators, with all available
  // permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st(variable_get('site_name', 'Home')),
    'link_path' => 'api',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the required themes.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'uikit')
    ->execute();
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'docs')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');
}

/**
 * Implements hook_install_tasks().
 */
function uikit_api_development_install_tasks(&$install_state) {
  // Set a variable to determine if batch processing will be needed during
  // installation.
  $process_drupal_core = variable_get('process_drupal_core', FALSE);

  // Configure the tasks to run during installation.
  $tasks = array(
    '_uikit_api_project_form' => array(
      'display_name' => st('Configure UIkit API Project'),
      'type' => 'form',
    ),
    '_uikit_api_branch_form' => array(
      'display_name' => st('Configure UIkit API Branch'),
      'type' => 'form',
    ),
    '_configure_uikit_api' => array(
      'display_name' => st('Configure UIkit API'),
      'display' => FALSE,
      'type' => 'batch',
    ),
  );

  return $tasks;
}

/**
 * Form constructor to configure the UIkit API project.
 */
function _uikit_api_project_form($form, &$form_state) {
  drupal_set_title('Configure UIkit API Project');
  module_load_include('inc', 'api', 'api.admin');

  $form = drupal_get_form('api_project_edit_form');
  $form['uikit_api'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create UIkit API project'),
    '#description' => t('<p>This will create the UIkit theme API project. You are free to change the title of the project, while the other values have been preset for you.</p>'),
    '#weight' => -100,
  );
  $form['project_name']['#value'] = t('uikit');
  $form['project_name']['#disabled'] = TRUE;
  $form['project_title']['#value'] = t('UIkit');
  $form['project_type']['#value'] = t('theme');
  $form['project_type']['#disabled'] = TRUE;
  $form['submit']['#value'] = t('Save and continue');
  return $form;
}

/**
 * Form constructor to configure the UIkit API branch.
 */
function _uikit_api_branch_form($form, &$form_state) {
  drupal_set_title('Configure UIkit API Branch');
  module_load_include('inc', 'api', 'api.admin');

  $form = drupal_get_form('api_branch_edit_form');
  $form['uikit_api'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create UIkit API branch'),
    '#description' => t('<p>This will create a default branch for both the API site and the UIkit theme project. Preset values have been disabled, but you are free to make changes to the rest.</p>'),
    '#weight' => -100,
  );
  $form['project']['#value'] = t('uikit');
  $form['project']['#disabled'] = TRUE;
  $form['core_compatibility']['#value'] = t('7.x');
  $form['core_compatibility']['#disabled'] = TRUE;
  $form['preferred']['#value'] = 1;
  $form['preferred']['#disabled'] = TRUE;
  $form['branch_name']['#value'] = t('7.x');
  $form['branch_name']['#disabled'] = TRUE;
  $form['title']['#value'] = t('UIkit 7.x');
  $form['data']['directories']['#value'] = drupal_get_path('profile', drupal_get_profile()) . '/themes/contrib/uikit';
  $form['data']['directories']['#disabled'] = TRUE;
  $form['update_frequency']['#value'] = 604800;
  $form['update_frequency']['#disabled'] = TRUE;
  $form['submit']['#value'] = t('Save and continue');
  return $form;
}

/**
 * Batch operations to configure UIkit API.
 */
function _configure_uikit_api() {
  // Create the batch to process during installation.
  $batch = array(
    'operations' => array(
      array('uikit_api_processed', array()),
    ),
    'title' => t('Configuring UIkit API'),
    'error_message' => st('The UIkit API configuration has encountered an error.'),
    'file' => drupal_get_path('profile', 'uikit_api_development') . '/includes/install-tasks.inc',
    'finished' => 'uikit_api_finished',
  );
  return $batch;
}

/**
 * Implements hook_install_tasks_alter().
 */
function uikit_api_development_install_tasks_alter(&$tasks, $install_state) {
  if ($GLOBALS['theme'] != 'docs_admin') {
    unset($GLOBALS['theme']);

    drupal_static_reset();
    $GLOBALS['conf']['maintenance_theme'] = 'docs_admin';
    _drupal_maintenance_theme();
  }
}
